version: '2'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:kafka:zookeeper"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    ports:
      - 2181:2181/tcp
    volumes:
      - ./jolokia:/opt/jolokia
    environment:
      env: "docker"
      label: "testing"
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 50
      ZOOKEEPER_SYNC_LIMIT: 20
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=8778,host=0.0.0.0"

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:kafka:broker"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - ./jolokia:/opt/jolokia
    environment:
      env: "docker"
      label: "testing"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=8778,host=0.0.0.0"
      JMX_PORT: "9999"

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    hostname: kafka-connect
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:kafka:connect"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    ports:
      - "8082:8082"
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./jolokia:/opt/jolokia
      - ./splunk-kafka-connect:/etc/kafka-connect/jars/splunk-kafka-connect
      - ./kafka-connect-datagen/confluentinc-kafka-connect-datagen:/etc/kafka-connect/jars/confluentinc-kafka-connect-datagen
      - ./kafka-connect-syslog/confluentinc-kafka-connect-syslog:/etc/kafka-connect/jars/confluentinc-kafka-connect-syslog
      - ./kafka-connect:/etc/kafka-connect/config
    environment:
      env: "docker"
      label: "testing"
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=8778,host=0.0.0.0"
    command: "/usr/bin/connect-distributed /etc/kafka-connect/config/connect-distributed.properties-kafka-connect"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:confluent:schema-registry"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    volumes:
      - ./jolokia:/opt/jolokia
    environment:
      env: "docker"
      label: "testing"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=8778,host=0.0.0.0"

  ksql-server:
    image: confluentinc/cp-ksql-server:latest
    hostname: ksql-server
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:confluent:ksql-server"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    ports:
      - "8090:8090"
    depends_on:
      - kafka
    volumes:
      - ./jolokia:/opt/jolokia
    environment:
      env: "docker"
      label: "testing"
      KSQL_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      KSQL_KSQL_SERVICE_ID: "confluent_standalone_1_"
      KSQL_LISTENERS: "http://0.0.0.0:8090"
      KSQL_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=8778,host=0.0.0.0"

  kafka-rest:
    image: confluentinc/cp-kafka-rest:latest
    hostname: kafka-rest
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:confluent:kafka-rest"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    ports:
      - "8091:8091"
    depends_on:
      - kafka
    volumes:
      - ./jolokia:/opt/jolokia
    environment:
      env: "docker"
      label: "testing"
      KAFKA_REST_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8083"
      KAFKAREST_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=8778,host=0.0.0.0"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8091"
      KAFKA_REST_HOST_NAME: "kafka-rest"

  telegraf:
    image: telegraf:latest
    restart: always
    privileged: true
    environment:
      env: "docker"
      label: "testing"
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
      SPLUNK_HEC_URL: "https://splunk:8088"
      SPLUNK_HEC_TOKEN: "205d43f1-2a31-4e60-a8b3-327eda49944a"
    hostname: telegraf
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:telegraf"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro

  burrow:
    image: guilhemmarchand/burrow:latest
    restart: always
    hostname: burrow
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:burrow"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    ports:
      - 9002:9002
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./burrow/config:/etc/burrow/
      - ./burrow/tmp:/var/tmp/burrow
    environment:
      env: "docker"
      label: "testing"

  kafka-monitor:
    image: guilhemmarchand/kafka-monitor:latest
    hostname: kafka-monitor
    logging:
      driver: splunk
      options:
        env-regex: ".+"
        splunk-token: "11113ee7-919e-4dc3-bde6-da10a2ac6709"
        splunk-url: "https://splunk:8088"
        splunk-insecureskipverify: "true"
        splunk-verify-connection: "false"
        splunk-sourcetype: "docker:kafka-monitor"
        tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./kafka-monitor:/usr/local/share/kafka-monitor
    command: "/opt/kafka-monitor/bin/kafka-monitor-start.sh /usr/local/share/kafka-monitor/kafka-monitor.properties"
    environment:
      env: "docker"
      label: "testing"

  # This "container" is a workaround to pre-create topics for the Kafka Music application
  # until we have a more elegant way to do that.
  kafka-create-topics:
    image: confluentinc/cp-kafka:5.1.0
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    hostname: kafka-create-topics
    # We defined a dependency on "kafka", but `depends_on` will NOT wait for the
    # dependencies to be "ready" before starting the "kafka-create-topics"
    # container;  it waits only until the dependencies have started.  Hence we
    # must control startup order more explicitly.
    # See https://docs.docker.com/compose/startup-order/
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 20 && \
                       kafka-topics --create --topic play-events --if-not-exists --zookeeper zookeeper:2181 --partitions 4 --replication-factor 1 && \
                       kafka-topics --create --topic song-feed --if-not-exists --zookeeper zookeeper:2181 --partitions 4 --replication-factor 1 && \
                       sleep infinity'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  # Continuously generates input data for the Kafka Music application.
  kafka-music-data-generator:
    image: confluentinc/kafka-streams-examples:5.0.0
    hostname: kafka-music-data-generator
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
      - kafka-create-topics
    # Control startup order similarly to the "kafka-create-topics" container above.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 20 && \
                       java -cp /usr/share/java/kafka-streams-examples/kafka-streams-examples-5.0.0-standalone.jar \
                       io.confluent.examples.streams.interactivequeries.kafkamusic.KafkaMusicExampleDriver \
                       kafka:9092 http://schema-registry:8081'"
    environment:
      STREAMS_BOOTSTRAP_SERVERS: ignored
      STREAMS_SCHEMA_REGISTRY_PORT: ignored
      KAFKA_MUSIC_APP_REST_PORT: ignored

  # Runs the Kafka Music application.
  kafka-music-application:
    image: confluentinc/kafka-streams-examples:5.0.0
    hostname: kafka-music-application
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
      - kafka-create-topics
    volumes:
      - ./jolokia:/opt/jolokia
      - ./kafka-streams:/opt/kafka-streams
    # Control startup order similarly to the "kafka-create-topics" container above.
    # Note: The container's `run` script will perform the same readiness checks
    # for Kafka and Confluent Schema Registry, but that's ok because they complete fast.
    # The reason we check for readiness here is that we can insert a sleep time
    # for topic creation before we start the application.
    #
    # TODO: Once https://issues.apache.org/jira/browse/KAFKA-5037 is resolved,
    #       we can remove this `command` and use the image as-is.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 20 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 2 && \
                       /etc/confluent/docker/run'"
    ports:
      - '7070:7070'
    environment:
      STREAMS_BOOTSTRAP_SERVERS: kafka:9092
      STREAMS_SCHEMA_REGISTRY_PORT: 8081
      KAFKA_MUSIC_APP_REST_PORT: 7070

  kafka-manager:
    image: kafkamanager/kafka-manager:latest
    hostname: kafka-manager
    ports:
      - "9000:9000"
    depends_on:
      - zookeeper
      - kafka
    environment:
      ZK_HOSTS: "zookeeper:2181"
      KAFKA_MANAGER_AUTH_ENABLED: "true"
      KAFKA_MANAGER_USERNAME: "admin"
      KAFKA_MANAGER_PASSWORD: "password"

  splunk:
    image: splunk/splunk:7.2
    hostname: splunk
    ports:
      - "8000:8000"
      - "8088:8088"
      - "8089:8089"
      - "9997:9997"
      - "8080:8080"
    environment:
      SPLUNK_START_ARGS: "--accept-license"
      SPLUNK_PASSWORD: "password"
    volumes:
      - ./splunk/container_share:/opt/splunk/container_share
      - ./splunk/telegraf-kafka:/opt/splunk/etc/apps/telegraf-kafka
      - ./splunk/TA-docker-kafka:/opt/splunk/etc/apps/TA-docker-kafka
      - ./splunk/TA-telegraf-kafka:/opt/splunk/etc/apps/TA-telegraf-kafka
      - ./splunk/TA-kafka-streaming-platform:/opt/splunk/etc/apps/TA-kafka-streaming-platform
